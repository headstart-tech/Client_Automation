"""This File Contains Schema Related to Account Manager"""

from pydantic import BaseModel, Field, EmailStr, field_validator
from typing import Optional, Any
from datetime import datetime
from bson import ObjectId
from app.core.utils import Utility
from app.core.utils import CustomError


# Schema for New Account Manager which is extracted from the request
class NewAccountManager(BaseModel):
    first_name: Optional[str]
    middle_name: Optional[str] = ""
    last_name: Optional[str] = ""
    email: Optional[EmailStr]
    mobile_number: Optional[str] = Field(
        ..., pattern=r"^\d{10}$", min_length=10, max_length=10
    )
    associated_super_account_manager: Optional[str] = None

    @field_validator("associated_super_account_manager")
    def validate_associated_super_account_manager(cls, value):
        if not ObjectId.is_valid(value):
            raise ValueError("Invalid super account manager id")
        return value

    class Config:
        extra = "forbid"


class UpdateAccountManager(BaseModel):
    email: Optional[EmailStr] = None
    mobile_number: Optional[str] = Field(
        pattern=r"^\d{10}$", min_length=10, max_length=10, default=None
    )

    class Config:
        extra = "forbid"


class ChangeSuperAccountManager(BaseModel):
    super_account_manager_id: Optional[str]


class ListofClientsIdModel(BaseModel):
    client_ids: list[str]

    @field_validator("client_ids")
    def validate_client_ids(cls, value):
        if not all(ObjectId.is_valid(client_id) for client_id in value):
            raise CustomError("Invalid client ids")
        return value


class ClientIdModel(BaseModel):
    client_id: str

    @field_validator("client_id")
    def validate_client_id(cls, value):
        if not ObjectId.is_valid(value):
            raise CustomError("Invalid client id")
        return value


# Schema for Role which will be Used by System Fields
class SystemField_Role(BaseModel):
    role_name: str
    role_id: Any
    pgsql_id: Optional[int] = None

    class Config:
        arbitrary_types_allowed = True


# System Fields which are Generated by System
class SystemFields(BaseModel):
    created_by: str
    user_name: str
    password: str
    role: SystemField_Role
    user_type: str = "account_manager"
    associated_super_account_manager_name: str
    assigned_clients: Optional[list] = []
    last_accessed: None = None
    created_on: Optional[datetime] = Field(default_factory=datetime.now)
    is_activated: Optional[bool] = True

    class Config:
        arbitrary_types_allowed = True
